// Code generated by protoc-gen-go.
// source: orc.proto
// DO NOT EDIT!

/*
Package orc_proto is a generated protocol buffer package.

It is generated from these files:
	orc.proto

It has these top-level messages:
	IntegerStatistics
	DoubleStatistics
	StringStatistics
	BucketStatistics
	DecimalStatistics
	DateStatistics
	TimestampStatistics
	BinaryStatistics
	ColumnStatistics
	RowIndexEntry
	RowIndex
	BloomFilter
	BloomFilterIndex
	Stream
	ColumnEncoding
	StripeFooter
	Type
	StripeInformation
	UserMetadataItem
	StripeStatistics
	Metadata
	Footer
	PostScript
	FileTail
*/
package orc

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type CompressionKind int32

const (
	CompressionKind_NONE   CompressionKind = 0
	CompressionKind_ZLIB   CompressionKind = 1
	CompressionKind_SNAPPY CompressionKind = 2
	CompressionKind_LZO    CompressionKind = 3
)

var CompressionKind_name = map[int32]string{
	0: "NONE",
	1: "ZLIB",
	2: "SNAPPY",
	3: "LZO",
}
var CompressionKind_value = map[string]int32{
	"NONE":   0,
	"ZLIB":   1,
	"SNAPPY": 2,
	"LZO":    3,
}

func (x CompressionKind) Enum() *CompressionKind {
	p := new(CompressionKind)
	*p = x
	return p
}
func (x CompressionKind) String() string {
	return proto.EnumName(CompressionKind_name, int32(x))
}
func (x *CompressionKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CompressionKind_value, data, "CompressionKind")
	if err != nil {
		return err
	}
	*x = CompressionKind(value)
	return nil
}

// if you add new index stream kinds, you need to make sure to update
// StreamName to ensure it is added to the stripe in the right area
type Stream_Kind int32

const (
	Stream_PRESENT          Stream_Kind = 0
	Stream_DATA             Stream_Kind = 1
	Stream_LENGTH           Stream_Kind = 2
	Stream_DICTIONARY_DATA  Stream_Kind = 3
	Stream_DICTIONARY_COUNT Stream_Kind = 4
	Stream_SECONDARY        Stream_Kind = 5
	Stream_ROW_INDEX        Stream_Kind = 6
	Stream_BLOOM_FILTER     Stream_Kind = 7
)

var Stream_Kind_name = map[int32]string{
	0: "PRESENT",
	1: "DATA",
	2: "LENGTH",
	3: "DICTIONARY_DATA",
	4: "DICTIONARY_COUNT",
	5: "SECONDARY",
	6: "ROW_INDEX",
	7: "BLOOM_FILTER",
}
var Stream_Kind_value = map[string]int32{
	"PRESENT":          0,
	"DATA":             1,
	"LENGTH":           2,
	"DICTIONARY_DATA":  3,
	"DICTIONARY_COUNT": 4,
	"SECONDARY":        5,
	"ROW_INDEX":        6,
	"BLOOM_FILTER":     7,
}

func (x Stream_Kind) Enum() *Stream_Kind {
	p := new(Stream_Kind)
	*p = x
	return p
}
func (x Stream_Kind) String() string {
	return proto.EnumName(Stream_Kind_name, int32(x))
}
func (x *Stream_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Stream_Kind_value, data, "Stream_Kind")
	if err != nil {
		return err
	}
	*x = Stream_Kind(value)
	return nil
}

type ColumnEncoding_Kind int32

const (
	ColumnEncoding_DIRECT        ColumnEncoding_Kind = 0
	ColumnEncoding_DICTIONARY    ColumnEncoding_Kind = 1
	ColumnEncoding_DIRECT_V2     ColumnEncoding_Kind = 2
	ColumnEncoding_DICTIONARY_V2 ColumnEncoding_Kind = 3
)

var ColumnEncoding_Kind_name = map[int32]string{
	0: "DIRECT",
	1: "DICTIONARY",
	2: "DIRECT_V2",
	3: "DICTIONARY_V2",
}
var ColumnEncoding_Kind_value = map[string]int32{
	"DIRECT":        0,
	"DICTIONARY":    1,
	"DIRECT_V2":     2,
	"DICTIONARY_V2": 3,
}

func (x ColumnEncoding_Kind) Enum() *ColumnEncoding_Kind {
	p := new(ColumnEncoding_Kind)
	*p = x
	return p
}
func (x ColumnEncoding_Kind) String() string {
	return proto.EnumName(ColumnEncoding_Kind_name, int32(x))
}
func (x *ColumnEncoding_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ColumnEncoding_Kind_value, data, "ColumnEncoding_Kind")
	if err != nil {
		return err
	}
	*x = ColumnEncoding_Kind(value)
	return nil
}

type Type_Kind int32

const (
	Type_BOOLEAN   Type_Kind = 0
	Type_BYTE      Type_Kind = 1
	Type_SHORT     Type_Kind = 2
	Type_INT       Type_Kind = 3
	Type_LONG      Type_Kind = 4
	Type_FLOAT     Type_Kind = 5
	Type_DOUBLE    Type_Kind = 6
	Type_STRING    Type_Kind = 7
	Type_BINARY    Type_Kind = 8
	Type_TIMESTAMP Type_Kind = 9
	Type_LIST      Type_Kind = 10
	Type_MAP       Type_Kind = 11
	Type_STRUCT    Type_Kind = 12
	Type_UNION     Type_Kind = 13
	Type_DECIMAL   Type_Kind = 14
	Type_DATE      Type_Kind = 15
	Type_VARCHAR   Type_Kind = 16
	Type_CHAR      Type_Kind = 17
)

var Type_Kind_name = map[int32]string{
	0:  "BOOLEAN",
	1:  "BYTE",
	2:  "SHORT",
	3:  "INT",
	4:  "LONG",
	5:  "FLOAT",
	6:  "DOUBLE",
	7:  "STRING",
	8:  "BINARY",
	9:  "TIMESTAMP",
	10: "LIST",
	11: "MAP",
	12: "STRUCT",
	13: "UNION",
	14: "DECIMAL",
	15: "DATE",
	16: "VARCHAR",
	17: "CHAR",
}
var Type_Kind_value = map[string]int32{
	"BOOLEAN":   0,
	"BYTE":      1,
	"SHORT":     2,
	"INT":       3,
	"LONG":      4,
	"FLOAT":     5,
	"DOUBLE":    6,
	"STRING":    7,
	"BINARY":    8,
	"TIMESTAMP": 9,
	"LIST":      10,
	"MAP":       11,
	"STRUCT":    12,
	"UNION":     13,
	"DECIMAL":   14,
	"DATE":      15,
	"VARCHAR":   16,
	"CHAR":      17,
}

func (x Type_Kind) Enum() *Type_Kind {
	p := new(Type_Kind)
	*p = x
	return p
}
func (x Type_Kind) String() string {
	return proto.EnumName(Type_Kind_name, int32(x))
}
func (x *Type_Kind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_Kind_value, data, "Type_Kind")
	if err != nil {
		return err
	}
	*x = Type_Kind(value)
	return nil
}

type IntegerStatistics struct {
	Minimum          *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IntegerStatistics) Reset()         { *m = IntegerStatistics{} }
func (m *IntegerStatistics) String() string { return proto.CompactTextString(m) }
func (*IntegerStatistics) ProtoMessage()    {}

func (m *IntegerStatistics) GetMinimum() int64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *IntegerStatistics) GetMaximum() int64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *IntegerStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type DoubleStatistics struct {
	Minimum          *float64 `protobuf:"fixed64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *float64 `protobuf:"fixed64,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *float64 `protobuf:"fixed64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DoubleStatistics) Reset()         { *m = DoubleStatistics{} }
func (m *DoubleStatistics) String() string { return proto.CompactTextString(m) }
func (*DoubleStatistics) ProtoMessage()    {}

func (m *DoubleStatistics) GetMinimum() float64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *DoubleStatistics) GetMaximum() float64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

func (m *DoubleStatistics) GetSum() float64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type StringStatistics struct {
	Minimum *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	// sum will store the total length of all strings in a stripe
	Sum              *int64 `protobuf:"zigzag64,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StringStatistics) Reset()         { *m = StringStatistics{} }
func (m *StringStatistics) String() string { return proto.CompactTextString(m) }
func (*StringStatistics) ProtoMessage()    {}

func (m *StringStatistics) GetMinimum() string {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return ""
}

func (m *StringStatistics) GetMaximum() string {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return ""
}

func (m *StringStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type BucketStatistics struct {
	Count            []uint64 `protobuf:"varint,1,rep,packed,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BucketStatistics) Reset()         { *m = BucketStatistics{} }
func (m *BucketStatistics) String() string { return proto.CompactTextString(m) }
func (*BucketStatistics) ProtoMessage()    {}

func (m *BucketStatistics) GetCount() []uint64 {
	if m != nil {
		return m.Count
	}
	return nil
}

type DecimalStatistics struct {
	Minimum          *string `protobuf:"bytes,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *string `protobuf:"bytes,2,opt,name=maximum" json:"maximum,omitempty"`
	Sum              *string `protobuf:"bytes,3,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DecimalStatistics) Reset()         { *m = DecimalStatistics{} }
func (m *DecimalStatistics) String() string { return proto.CompactTextString(m) }
func (*DecimalStatistics) ProtoMessage()    {}

func (m *DecimalStatistics) GetMinimum() string {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return ""
}

func (m *DecimalStatistics) GetMaximum() string {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return ""
}

func (m *DecimalStatistics) GetSum() string {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return ""
}

type DateStatistics struct {
	// min,max values saved as days since epoch
	Minimum          *int32 `protobuf:"zigzag32,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int32 `protobuf:"zigzag32,2,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DateStatistics) Reset()         { *m = DateStatistics{} }
func (m *DateStatistics) String() string { return proto.CompactTextString(m) }
func (*DateStatistics) ProtoMessage()    {}

func (m *DateStatistics) GetMinimum() int32 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *DateStatistics) GetMaximum() int32 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

type TimestampStatistics struct {
	// min,max values saved as milliseconds since epoch
	Minimum          *int64 `protobuf:"zigzag64,1,opt,name=minimum" json:"minimum,omitempty"`
	Maximum          *int64 `protobuf:"zigzag64,2,opt,name=maximum" json:"maximum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TimestampStatistics) Reset()         { *m = TimestampStatistics{} }
func (m *TimestampStatistics) String() string { return proto.CompactTextString(m) }
func (*TimestampStatistics) ProtoMessage()    {}

func (m *TimestampStatistics) GetMinimum() int64 {
	if m != nil && m.Minimum != nil {
		return *m.Minimum
	}
	return 0
}

func (m *TimestampStatistics) GetMaximum() int64 {
	if m != nil && m.Maximum != nil {
		return *m.Maximum
	}
	return 0
}

type BinaryStatistics struct {
	// sum will store the total binary blob length in a stripe
	Sum              *int64 `protobuf:"zigzag64,1,opt,name=sum" json:"sum,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BinaryStatistics) Reset()         { *m = BinaryStatistics{} }
func (m *BinaryStatistics) String() string { return proto.CompactTextString(m) }
func (*BinaryStatistics) ProtoMessage()    {}

func (m *BinaryStatistics) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

type ColumnStatistics struct {
	NumberOfValues      *uint64              `protobuf:"varint,1,opt,name=numberOfValues" json:"numberOfValues,omitempty"`
	IntStatistics       *IntegerStatistics   `protobuf:"bytes,2,opt,name=intStatistics" json:"intStatistics,omitempty"`
	DoubleStatistics    *DoubleStatistics    `protobuf:"bytes,3,opt,name=doubleStatistics" json:"doubleStatistics,omitempty"`
	StringStatistics    *StringStatistics    `protobuf:"bytes,4,opt,name=stringStatistics" json:"stringStatistics,omitempty"`
	BucketStatistics    *BucketStatistics    `protobuf:"bytes,5,opt,name=bucketStatistics" json:"bucketStatistics,omitempty"`
	DecimalStatistics   *DecimalStatistics   `protobuf:"bytes,6,opt,name=decimalStatistics" json:"decimalStatistics,omitempty"`
	DateStatistics      *DateStatistics      `protobuf:"bytes,7,opt,name=dateStatistics" json:"dateStatistics,omitempty"`
	BinaryStatistics    *BinaryStatistics    `protobuf:"bytes,8,opt,name=binaryStatistics" json:"binaryStatistics,omitempty"`
	TimestampStatistics *TimestampStatistics `protobuf:"bytes,9,opt,name=timestampStatistics" json:"timestampStatistics,omitempty"`
	HasNull             *bool                `protobuf:"varint,10,opt,name=hasNull" json:"hasNull,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *ColumnStatistics) Reset()         { *m = ColumnStatistics{} }
func (m *ColumnStatistics) String() string { return proto.CompactTextString(m) }
func (*ColumnStatistics) ProtoMessage()    {}

func (m *ColumnStatistics) GetNumberOfValues() uint64 {
	if m != nil && m.NumberOfValues != nil {
		return *m.NumberOfValues
	}
	return 0
}

func (m *ColumnStatistics) GetIntStatistics() *IntegerStatistics {
	if m != nil {
		return m.IntStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDoubleStatistics() *DoubleStatistics {
	if m != nil {
		return m.DoubleStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetStringStatistics() *StringStatistics {
	if m != nil {
		return m.StringStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetBucketStatistics() *BucketStatistics {
	if m != nil {
		return m.BucketStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDecimalStatistics() *DecimalStatistics {
	if m != nil {
		return m.DecimalStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetDateStatistics() *DateStatistics {
	if m != nil {
		return m.DateStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetBinaryStatistics() *BinaryStatistics {
	if m != nil {
		return m.BinaryStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetTimestampStatistics() *TimestampStatistics {
	if m != nil {
		return m.TimestampStatistics
	}
	return nil
}

func (m *ColumnStatistics) GetHasNull() bool {
	if m != nil && m.HasNull != nil {
		return *m.HasNull
	}
	return false
}

type RowIndexEntry struct {
	Positions        []uint64          `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
	Statistics       *ColumnStatistics `protobuf:"bytes,2,opt,name=statistics" json:"statistics,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RowIndexEntry) Reset()         { *m = RowIndexEntry{} }
func (m *RowIndexEntry) String() string { return proto.CompactTextString(m) }
func (*RowIndexEntry) ProtoMessage()    {}

func (m *RowIndexEntry) GetPositions() []uint64 {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *RowIndexEntry) GetStatistics() *ColumnStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type RowIndex struct {
	Entry            []*RowIndexEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RowIndex) Reset()         { *m = RowIndex{} }
func (m *RowIndex) String() string { return proto.CompactTextString(m) }
func (*RowIndex) ProtoMessage()    {}

func (m *RowIndex) GetEntry() []*RowIndexEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type BloomFilter struct {
	NumHashFunctions *uint32  `protobuf:"varint,1,opt,name=numHashFunctions" json:"numHashFunctions,omitempty"`
	Bitset           []uint64 `protobuf:"fixed64,2,rep,name=bitset" json:"bitset,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BloomFilter) Reset()         { *m = BloomFilter{} }
func (m *BloomFilter) String() string { return proto.CompactTextString(m) }
func (*BloomFilter) ProtoMessage()    {}

func (m *BloomFilter) GetNumHashFunctions() uint32 {
	if m != nil && m.NumHashFunctions != nil {
		return *m.NumHashFunctions
	}
	return 0
}

func (m *BloomFilter) GetBitset() []uint64 {
	if m != nil {
		return m.Bitset
	}
	return nil
}

type BloomFilterIndex struct {
	BloomFilter      []*BloomFilter `protobuf:"bytes,1,rep,name=bloomFilter" json:"bloomFilter,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *BloomFilterIndex) Reset()         { *m = BloomFilterIndex{} }
func (m *BloomFilterIndex) String() string { return proto.CompactTextString(m) }
func (*BloomFilterIndex) ProtoMessage()    {}

func (m *BloomFilterIndex) GetBloomFilter() []*BloomFilter {
	if m != nil {
		return m.BloomFilter
	}
	return nil
}

type Stream struct {
	Kind             *Stream_Kind `protobuf:"varint,1,opt,name=kind,enum=orc.proto.Stream_Kind" json:"kind,omitempty"`
	Column           *uint32      `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	Length           *uint64      `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}

func (m *Stream) GetKind() Stream_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Stream_PRESENT
}

func (m *Stream) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *Stream) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type ColumnEncoding struct {
	Kind             *ColumnEncoding_Kind `protobuf:"varint,1,opt,name=kind,enum=orc.proto.ColumnEncoding_Kind" json:"kind,omitempty"`
	DictionarySize   *uint32              `protobuf:"varint,2,opt,name=dictionarySize" json:"dictionarySize,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ColumnEncoding) Reset()         { *m = ColumnEncoding{} }
func (m *ColumnEncoding) String() string { return proto.CompactTextString(m) }
func (*ColumnEncoding) ProtoMessage()    {}

func (m *ColumnEncoding) GetKind() ColumnEncoding_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ColumnEncoding_DIRECT
}

func (m *ColumnEncoding) GetDictionarySize() uint32 {
	if m != nil && m.DictionarySize != nil {
		return *m.DictionarySize
	}
	return 0
}

type StripeFooter struct {
	Streams          []*Stream         `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty"`
	Columns          []*ColumnEncoding `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	WriterTimezone   *string           `protobuf:"bytes,3,opt,name=writerTimezone" json:"writerTimezone,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *StripeFooter) Reset()         { *m = StripeFooter{} }
func (m *StripeFooter) String() string { return proto.CompactTextString(m) }
func (*StripeFooter) ProtoMessage()    {}

func (m *StripeFooter) GetStreams() []*Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *StripeFooter) GetColumns() []*ColumnEncoding {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *StripeFooter) GetWriterTimezone() string {
	if m != nil && m.WriterTimezone != nil {
		return *m.WriterTimezone
	}
	return ""
}

type Type struct {
	Kind             *Type_Kind `protobuf:"varint,1,opt,name=kind,enum=orc.proto.Type_Kind" json:"kind,omitempty"`
	Subtypes         []uint32   `protobuf:"varint,2,rep,packed,name=subtypes" json:"subtypes,omitempty"`
	FieldNames       []string   `protobuf:"bytes,3,rep,name=fieldNames" json:"fieldNames,omitempty"`
	MaximumLength    *uint32    `protobuf:"varint,4,opt,name=maximumLength" json:"maximumLength,omitempty"`
	Precision        *uint32    `protobuf:"varint,5,opt,name=precision" json:"precision,omitempty"`
	Scale            *uint32    `protobuf:"varint,6,opt,name=scale" json:"scale,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}

func (m *Type) GetKind() Type_Kind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Type_BOOLEAN
}

func (m *Type) GetSubtypes() []uint32 {
	if m != nil {
		return m.Subtypes
	}
	return nil
}

func (m *Type) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

func (m *Type) GetMaximumLength() uint32 {
	if m != nil && m.MaximumLength != nil {
		return *m.MaximumLength
	}
	return 0
}

func (m *Type) GetPrecision() uint32 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func (m *Type) GetScale() uint32 {
	if m != nil && m.Scale != nil {
		return *m.Scale
	}
	return 0
}

type StripeInformation struct {
	Offset           *uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	IndexLength      *uint64 `protobuf:"varint,2,opt,name=indexLength" json:"indexLength,omitempty"`
	DataLength       *uint64 `protobuf:"varint,3,opt,name=dataLength" json:"dataLength,omitempty"`
	FooterLength     *uint64 `protobuf:"varint,4,opt,name=footerLength" json:"footerLength,omitempty"`
	NumberOfRows     *uint64 `protobuf:"varint,5,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StripeInformation) Reset()         { *m = StripeInformation{} }
func (m *StripeInformation) String() string { return proto.CompactTextString(m) }
func (*StripeInformation) ProtoMessage()    {}

func (m *StripeInformation) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *StripeInformation) GetIndexLength() uint64 {
	if m != nil && m.IndexLength != nil {
		return *m.IndexLength
	}
	return 0
}

func (m *StripeInformation) GetDataLength() uint64 {
	if m != nil && m.DataLength != nil {
		return *m.DataLength
	}
	return 0
}

func (m *StripeInformation) GetFooterLength() uint64 {
	if m != nil && m.FooterLength != nil {
		return *m.FooterLength
	}
	return 0
}

func (m *StripeInformation) GetNumberOfRows() uint64 {
	if m != nil && m.NumberOfRows != nil {
		return *m.NumberOfRows
	}
	return 0
}

type UserMetadataItem struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserMetadataItem) Reset()         { *m = UserMetadataItem{} }
func (m *UserMetadataItem) String() string { return proto.CompactTextString(m) }
func (*UserMetadataItem) ProtoMessage()    {}

func (m *UserMetadataItem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UserMetadataItem) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type StripeStatistics struct {
	ColStats         []*ColumnStatistics `protobuf:"bytes,1,rep,name=colStats" json:"colStats,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *StripeStatistics) Reset()         { *m = StripeStatistics{} }
func (m *StripeStatistics) String() string { return proto.CompactTextString(m) }
func (*StripeStatistics) ProtoMessage()    {}

func (m *StripeStatistics) GetColStats() []*ColumnStatistics {
	if m != nil {
		return m.ColStats
	}
	return nil
}

type Metadata struct {
	StripeStats      []*StripeStatistics `protobuf:"bytes,1,rep,name=stripeStats" json:"stripeStats,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}

func (m *Metadata) GetStripeStats() []*StripeStatistics {
	if m != nil {
		return m.StripeStats
	}
	return nil
}

type Footer struct {
	HeaderLength     *uint64              `protobuf:"varint,1,opt,name=headerLength" json:"headerLength,omitempty"`
	ContentLength    *uint64              `protobuf:"varint,2,opt,name=contentLength" json:"contentLength,omitempty"`
	Stripes          []*StripeInformation `protobuf:"bytes,3,rep,name=stripes" json:"stripes,omitempty"`
	Types            []*Type              `protobuf:"bytes,4,rep,name=types" json:"types,omitempty"`
	Metadata         []*UserMetadataItem  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty"`
	NumberOfRows     *uint64              `protobuf:"varint,6,opt,name=numberOfRows" json:"numberOfRows,omitempty"`
	Statistics       []*ColumnStatistics  `protobuf:"bytes,7,rep,name=statistics" json:"statistics,omitempty"`
	RowIndexStride   *uint32              `protobuf:"varint,8,opt,name=rowIndexStride" json:"rowIndexStride,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Footer) Reset()         { *m = Footer{} }
func (m *Footer) String() string { return proto.CompactTextString(m) }
func (*Footer) ProtoMessage()    {}

func (m *Footer) GetHeaderLength() uint64 {
	if m != nil && m.HeaderLength != nil {
		return *m.HeaderLength
	}
	return 0
}

func (m *Footer) GetContentLength() uint64 {
	if m != nil && m.ContentLength != nil {
		return *m.ContentLength
	}
	return 0
}

func (m *Footer) GetStripes() []*StripeInformation {
	if m != nil {
		return m.Stripes
	}
	return nil
}

func (m *Footer) GetTypes() []*Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Footer) GetMetadata() []*UserMetadataItem {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Footer) GetNumberOfRows() uint64 {
	if m != nil && m.NumberOfRows != nil {
		return *m.NumberOfRows
	}
	return 0
}

func (m *Footer) GetStatistics() []*ColumnStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Footer) GetRowIndexStride() uint32 {
	if m != nil && m.RowIndexStride != nil {
		return *m.RowIndexStride
	}
	return 0
}

// Serialized length must be less that 255 bytes
type PostScript struct {
	FooterLength         *uint64          `protobuf:"varint,1,opt,name=footerLength" json:"footerLength,omitempty"`
	Compression          *CompressionKind `protobuf:"varint,2,opt,name=compression,enum=orc.proto.CompressionKind" json:"compression,omitempty"`
	CompressionBlockSize *uint64          `protobuf:"varint,3,opt,name=compressionBlockSize" json:"compressionBlockSize,omitempty"`
	// the version of the file format
	//   [0, 11] = Hive 0.11
	//   [0, 12] = Hive 0.12
	Version        []uint32 `protobuf:"varint,4,rep,packed,name=version" json:"version,omitempty"`
	MetadataLength *uint64  `protobuf:"varint,5,opt,name=metadataLength" json:"metadataLength,omitempty"`
	// Version of the writer:
	//   0 (or missing) = original
	//   1 = HIVE-8732 fixed
	WriterVersion *uint32 `protobuf:"varint,6,opt,name=writerVersion" json:"writerVersion,omitempty"`
	// Leave this last in the record
	Magic            *string `protobuf:"bytes,8000,opt,name=magic" json:"magic,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PostScript) Reset()         { *m = PostScript{} }
func (m *PostScript) String() string { return proto.CompactTextString(m) }
func (*PostScript) ProtoMessage()    {}

func (m *PostScript) GetFooterLength() uint64 {
	if m != nil && m.FooterLength != nil {
		return *m.FooterLength
	}
	return 0
}

func (m *PostScript) GetCompression() CompressionKind {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return CompressionKind_NONE
}

func (m *PostScript) GetCompressionBlockSize() uint64 {
	if m != nil && m.CompressionBlockSize != nil {
		return *m.CompressionBlockSize
	}
	return 0
}

func (m *PostScript) GetVersion() []uint32 {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *PostScript) GetMetadataLength() uint64 {
	if m != nil && m.MetadataLength != nil {
		return *m.MetadataLength
	}
	return 0
}

func (m *PostScript) GetWriterVersion() uint32 {
	if m != nil && m.WriterVersion != nil {
		return *m.WriterVersion
	}
	return 0
}

func (m *PostScript) GetMagic() string {
	if m != nil && m.Magic != nil {
		return *m.Magic
	}
	return ""
}

// The contents of the file tail that must be serialized.
type FileTail struct {
	Postscript       *PostScript `protobuf:"bytes,1,opt,name=postscript" json:"postscript,omitempty"`
	Footer           *Footer     `protobuf:"bytes,2,opt,name=footer" json:"footer,omitempty"`
	FooterStart      *uint64     `protobuf:"varint,3,opt,name=footerStart" json:"footerStart,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *FileTail) Reset()         { *m = FileTail{} }
func (m *FileTail) String() string { return proto.CompactTextString(m) }
func (*FileTail) ProtoMessage()    {}

func (m *FileTail) GetPostscript() *PostScript {
	if m != nil {
		return m.Postscript
	}
	return nil
}

func (m *FileTail) GetFooter() *Footer {
	if m != nil {
		return m.Footer
	}
	return nil
}

func (m *FileTail) GetFooterStart() uint64 {
	if m != nil && m.FooterStart != nil {
		return *m.FooterStart
	}
	return 0
}

func init() {
	proto.RegisterEnum("orc.proto.CompressionKind", CompressionKind_name, CompressionKind_value)
	proto.RegisterEnum("orc.proto.Stream_Kind", Stream_Kind_name, Stream_Kind_value)
	proto.RegisterEnum("orc.proto.ColumnEncoding_Kind", ColumnEncoding_Kind_name, ColumnEncoding_Kind_value)
	proto.RegisterEnum("orc.proto.Type_Kind", Type_Kind_name, Type_Kind_value)
}
